{"ast":null,"code":"var _jsxFileName = \"/Users/Dilan/Desktop/Homework/Employee-Directory/src/App.js\";\nimport React, { Component } from \"react\";\nimport Hero from \"./components/Hero\";\nimport heroImage from \"./assets/llamacorn_residents.JPG\";\nimport Card from \"./components/Card\";\nimport API from \"./utils/API\";\nimport Filter from \"./components/Filter\";\nimport Sort from \"./components/Sort\";\nimport \"./components/style.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      result: {},\n      search: \"\"\n    };\n\n    this.searchResident = id => {\n      let residents = [];\n\n      for (id = 10; id < 170; id += 10) {\n        API.search(id).then(res => {\n          residents.push(res.data);\n          this.setState({\n            result: residents\n          });\n        }).catch(err => console.log(err));\n      }\n    };\n\n    this.sortByHobby = id => {\n      let names = [];\n\n      for (id = 10; id < 170; id += 10) {\n        API.search(id).then(res => {\n          function compare(a, b) {\n            // Use toUpperCase() to ignore character casing\n            const hobbyA = a.hobby.toUpperCase();\n            const hobbyB = b.hobby.toUpperCase();\n            let comparison = 0;\n\n            if (hobbyA > hobbyB) {\n              comparison = 1;\n            } else if (hobbyA < hobbyB) {\n              comparison = -1;\n            }\n\n            return comparison;\n          }\n\n          names.push(res.data);\n          names.sort(compare);\n          console.log(names);\n          this.setState({\n            result: names\n          });\n        }).catch(err => console.log(err));\n      }\n    };\n\n    this.sortByPersonality = id => {\n      let personalities = [];\n\n      for (id = 10; id < 170; id += 10) {\n        API.search(id).then(res => {\n          function compare(a, b) {\n            // Use toUpperCase() to ignore character casing\n            const personalityA = a.personality.toUpperCase();\n            const personalityB = b.personality.toUpperCase();\n            let comparison = 0;\n\n            if (personalityA > personalityB) {\n              comparison = 1;\n            } else if (personalityA < personalityB) {\n              comparison = -1;\n            }\n\n            return comparison;\n          }\n\n          personalities.push(res.data);\n          personalities.sort(compare);\n          console.log(personalities);\n          this.setState({\n            result: personalities\n          });\n        }).catch(err => console.log(err));\n      }\n    };\n\n    this.sortByGender = id => {\n      let genders = [];\n\n      for (id = 10; id < 170; id += 10) {\n        API.search(id).then(res => {\n          function compare(a, b) {\n            // Use toUpperCase() to ignore character casing\n            const genderA = a.gender.toUpperCase();\n            const genderB = b.gender.toUpperCase();\n            let comparison = 0;\n\n            if (genderA > genderB) {\n              comparison = 1;\n            } else if (genderA < genderB) {\n              comparison = -1;\n            }\n\n            return comparison;\n          }\n\n          genders.push(res.data);\n          genders.sort(compare);\n          console.log(genders);\n          this.setState({\n            result: genders\n          });\n        }).catch(err => console.log(err));\n      }\n    };\n\n    this.filterByMale = id => {\n      let males = [];\n\n      for (id = 10; id < 170; id += 10) {\n        API.search(id).then(res => {\n          if (res.data.gender === \"Male\") {}\n\n          console.log(males);\n          this.setState({\n            result: males\n          });\n        }).catch(err => console.log(err));\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.searchResident();\n  }\n\n  render() {\n    let response = this.state.result;\n\n    if (!response) {\n      return;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"all-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Hero, {\n      backgroundImage: heroImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nav \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Filter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Sort, {\n      sortByHobby: this.sortByHobby,\n      sortByPersonality: this.sortByPersonality,\n      sortByGender: this.sortByGender,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Card, {\n      residents: this.state.result,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Dilan/Desktop/Homework/Employee-Directory/src/App.js"],"names":["React","Component","Hero","heroImage","Card","API","Filter","Sort","App","state","result","search","searchResident","id","residents","then","res","push","data","setState","catch","err","console","log","sortByHobby","names","compare","a","b","hobbyA","hobby","toUpperCase","hobbyB","comparison","sort","sortByPersonality","personalities","personalityA","personality","personalityB","sortByGender","genders","genderA","gender","genderB","filterByMale","males","componentDidMount","render","response"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Hero from \"./components/Hero\";\nimport heroImage from \"./assets/llamacorn_residents.JPG\";\nimport Card from \"./components/Card\";\nimport API from \"./utils/API\";\nimport Filter from \"./components/Filter\";\nimport Sort from \"./components/Sort\";\nimport \"./components/style.css\"\n\nclass App extends Component {\n    state = {\n        result: {},\n        search: \"\"\n    };\n\n    componentDidMount() {\n        this.searchResident();\n    }\n\n\n    searchResident = (id) => {\n        let residents = []\n        for (id = 10; id < 170; id += 10) {\n            API.search(id)\n                .then(res => {\n                    residents.push(res.data)\n                    this.setState({ result: residents })\n                }\n                )\n                .catch(err => console.log(err));\n        }\n    }\n\n    sortByHobby = (id) => {\n        let names = []\n        for (id = 10; id < 170; id += 10) {\n            API.search(id)\n                .then(res => {\n                    function compare(a, b) {\n                        // Use toUpperCase() to ignore character casing\n                        const hobbyA = a.hobby.toUpperCase();\n                        const hobbyB = b.hobby.toUpperCase();\n                      \n                        let comparison = 0;\n                        if (hobbyA > hobbyB) {\n                          comparison = 1;\n                        } else if (hobbyA < hobbyB) {\n                          comparison = -1;\n                        }\n                        return comparison;\n                      }\n\n                    names.push(res.data);\n                    names.sort(compare);\n                    console.log(names);\n                    this.setState({ result: names })\n                }\n                )\n                .catch(err => console.log(err));\n        }\n    }\n\n    sortByPersonality = (id) => {\n        let personalities = []\n        for (id = 10; id < 170; id += 10) {\n            API.search(id)\n                .then(res => {\n                    function compare(a, b) {\n                        // Use toUpperCase() to ignore character casing\n                        const personalityA = a.personality.toUpperCase();\n                        const personalityB = b.personality.toUpperCase();\n                      \n                        let comparison = 0;\n                        if (personalityA > personalityB) {\n                          comparison = 1;\n                        } else if (personalityA < personalityB) {\n                          comparison = -1;\n                        }\n                        return comparison;\n                      }\n\n                    personalities.push(res.data);\n                    personalities.sort(compare);\n                    console.log(personalities);\n                    this.setState({ result: personalities })\n                }\n                )\n                .catch(err => console.log(err));\n        }\n    }\n\n    sortByGender = (id) => {\n        let genders = []\n        for (id = 10; id < 170; id += 10) {\n            API.search(id)\n                .then(res => {\n                    function compare(a, b) {\n                        // Use toUpperCase() to ignore character casing\n                        const genderA = a.gender.toUpperCase();\n                        const genderB = b.gender.toUpperCase();\n                      \n                        let comparison = 0;\n                        if (genderA > genderB) {\n                          comparison = 1;\n                        } else if (genderA < genderB) {\n                          comparison = -1;\n                        }\n                        return comparison;\n                      }\n\n                    genders.push(res.data);\n                    genders.sort(compare);\n                    console.log(genders);\n                    this.setState({ result: genders })\n                }\n                )\n                .catch(err => console.log(err));\n        }\n    }\n\n    filterByMale = (id) => {\n        let males = []\n        for (id = 10; id < 170; id += 10) {\n            API.search(id)\n                .then(res => {\n                    if (res.data.gender === \"Male\") {\n\n                    }\n\n                    console.log(males);\n                    this.setState({ result: males })\n                }\n                )\n                .catch(err => console.log(err));\n        }\n    }\n\n\n    render() {\n\n        let response = this.state.result;\n\n        if (!response) {\n            return\n        }\n\n        return (\n            <div className=\"all-container\">\n                <Hero backgroundImage={heroImage} />\n                <div className=\"nav \">\n                    <Filter />\n                    <Sort \n                    sortByHobby={this.sortByHobby}\n                    sortByPersonality={this.sortByPersonality}\n                    sortByGender={this.sortByGender}\n                    />\n                </div>\n                <Card residents={this.state.result} />\n            </div>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}